{"ast":null,"code":"import fetchData from \"./utils/fetchData\";\nconst url = process.env.REACT_APP_SERVER_URL + '/gear';\nexport const createGear = async (gear, currentUser, dispatch, setPage) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url,\n    body: gear,\n    token: currentUser === null || currentUser === void 0 ? void 0 : currentUser.token\n  }, dispatch);\n  if (result) {\n    // function responsible for creating the room\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'Gear has been added successfully'\n      }\n    });\n    dispatch({\n      type: 'RESET_GEAR'\n    });\n    setPage(0);\n    dispatch({\n      type: 'UPDATE_GEAR',\n      payload: result\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const getGears = async dispatch => {\n  const result = await fetchData({\n    url,\n    method: 'GET'\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_GEARS',\n      payload: result\n    });\n  }\n};","map":{"version":3,"names":["fetchData","url","process","env","REACT_APP_SERVER_URL","createGear","gear","currentUser","dispatch","setPage","type","result","body","token","payload","open","severity","message","getGears","method"],"sources":["C:/Users/igorl/Downloads/geardepo5-master/client/src/actions/gear.js"],"sourcesContent":["import fetchData from \"./utils/fetchData\"\n\nconst url = process.env.REACT_APP_SERVER_URL + '/gear'\n\nexport const createGear = async(gear, currentUser, dispatch, setPage) =>{\n    dispatch({type: 'START_LOADING'})\n\n    const result = await fetchData({\n        url,\n        body:gear,\n        token:currentUser?.token\n    }, dispatch)\n\n    if(result){ // function responsible for creating the room\n        dispatch({type:'UPDATE_ALERT', payload:{open:true, severity:'success', message:'Gear has been added successfully'}});\n        dispatch({type: 'RESET_GEAR'})\n        setPage(0);\n        dispatch({type: 'UPDATE_GEAR', payload:result});\n    }\n\n    dispatch({type: 'END_LOADING'});\n};\n\nexport const getGears = async(dispatch)=>{\n    const result = await fetchData({url, method:'GET'}, dispatch)\n    if(result){\n        dispatch({type:'UPDATE_GEARS', payload: result});\n    }\n};"],"mappings":"AAAA,OAAOA,SAAS,MAAM,mBAAmB;AAEzC,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,GAAG,OAAO;AAEtD,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAMC,IAAI,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,KAAI;EACpED,QAAQ,CAAC;IAACE,IAAI,EAAE;EAAe,CAAC,CAAC;EAEjC,MAAMC,MAAM,GAAG,MAAMX,SAAS,CAAC;IAC3BC,GAAG;IACHW,IAAI,EAACN,IAAI;IACTO,KAAK,EAACN,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM;EACvB,CAAC,EAAEL,QAAQ,CAAC;EAEZ,IAAGG,MAAM,EAAC;IAAE;IACRH,QAAQ,CAAC;MAACE,IAAI,EAAC,cAAc;MAAEI,OAAO,EAAC;QAACC,IAAI,EAAC,IAAI;QAAEC,QAAQ,EAAC,SAAS;QAAEC,OAAO,EAAC;MAAkC;IAAC,CAAC,CAAC;IACpHT,QAAQ,CAAC;MAACE,IAAI,EAAE;IAAY,CAAC,CAAC;IAC9BD,OAAO,CAAC,CAAC,CAAC;IACVD,QAAQ,CAAC;MAACE,IAAI,EAAE,aAAa;MAAEI,OAAO,EAACH;IAAM,CAAC,CAAC;EACnD;EAEAH,QAAQ,CAAC;IAACE,IAAI,EAAE;EAAa,CAAC,CAAC;AACnC,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG,MAAMV,QAAQ,IAAG;EACrC,MAAMG,MAAM,GAAG,MAAMX,SAAS,CAAC;IAACC,GAAG;IAAEkB,MAAM,EAAC;EAAK,CAAC,EAAEX,QAAQ,CAAC;EAC7D,IAAGG,MAAM,EAAC;IACNH,QAAQ,CAAC;MAACE,IAAI,EAAC,cAAc;MAAEI,OAAO,EAAEH;IAAM,CAAC,CAAC;EACpD;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}